/*
 * DESCRIPTION
 *
 * Программный модуль предназначен для хранения функций, позволяющих производить работу с форматным вводом-выводом данных
 * В данной реализации доступен только форматный вывод через Fio_printf():
 *
 * 				Входные данные:
 *
 * 					- Форматная строка
 * 					- Переменные форматной строки
 * 					- Функция для посимволного вывода
 *
 * 				Выходные данные:
 *
 * 					Отсутсвуют
 *
 *
 * Таким образом для того, чтобы воспользоваться функцией необходимо, например:
 *
 *   #include "Fio.h"
 *
 *   void main(void)
 *   {
 *       Fio_printf("%s", "Hello World!\n", putChar);  // show some text !
 *       while(1);
 *   }
 *
 *   void putChar(char c)
 *   {
 *       do something with c here, maybe write it to a serial port
 *   }
 *
 * Либо встроить в другую функцию. Для этого необходимо, например:
 *
 *   #include "Fio.h"
 *
 *   void Whatever_printf(const char *fmt, ...){
 *
 *	 va_list ap;
 *	 va_start(ap, fmt);
 *
 *	 Fio_printf(fmt, ap, Whatever_putChar);
 *
 *	 va_end(ap);
 *   }
 *
 * Работа Fio_printf() тестировалась для микроконтроллера jn5148 и его компиляторной сборки из JN-SW-4041-SDK-Toolchain-v1.1
 * В данном случае при передаче числа одинарной точности в качестве аргумента преведит к его преобразованию к числу двойной точности.
 * По этой причине работа с раскомментированным параметром SINGLE_PRECISION не тестировалась
 *
 * Функцией Fio_printf() не поддерживается работа с денормализованными числами. Если встречается такое число, оно преобразуется к 0
 *
 * Особенностью представления чисел с плавающей точкой является меняющаяся абсолютная точность в зависимости от размеров числа (Ограниченное число бит для записи)
 * Поэтому реальное вещественное число представляется наиболее близким из набора всех возможных чисел той или иной точности (https://ru.wikipedia.org/wiki/Машинный_ноль)
 * Нужно каким-либо образом убирать числа очень маленьких порядков, образовавшихся из-за этой особенности.
 * Одним из способов (который здесь используется) является отслеживание окна между существенной частью и несущественной
 * Это может являться причиной проблем при операциях с очень маленькими и очень большими числами -> Тогда нужно уменьшить ширину окна
 * При большей точности можно задать большую ширину окна
 *
 */

#ifndef FIO_H
#define FIO_H

/****************************************************************************/
/****************************************************************************/

#include <jendefs.h>

/****************************************************************************/
/***        Macro Definitions                                             ***/
/****************************************************************************/

//#define SINGLE_PRECISION// Число одинарной точности, или float // Одинарная точность // Нужно отлаживать там где поддерживается преобразование к float
#define DOUBLE_PRECISION// Число двойной точности, или double

// Допустимые параметры вещественного числа, подаваемого на вход функции Fio_printf
#define MAX_INTEGER_VALUE     	1000000.0// Максимальное по модулю число принимаемое в качестве вещественного
#define MAX_FRACTION_DIGITS    	4// Максимальное количество цифр дробной части числа

/****************************************************************************/
/***        Exported Functions                                            ***/
/****************************************************************************/

PUBLIC void Fio_printf(const char *fmt, va_list ap, void (*fp)(char c));// Форматный вывод
PUBLIC void Fio_convertNum2String(uint64 Number, void (*putChar)(char c), uint8 Base);// Преобразовать число в строку// Base - основание системы счисления
#endif
